
/* :mode=c: */

/*! \page conv1 Conventions
This page gives various conventions used throughout PORUS.

\section terms Terms

Here are a few terms we've adopted when talking about PORUS.

- \e User \e code is code written by a user of PORUS.

- The \e public \e API is the set of functions declared in the \c usb.h tree and up.  Users may use this API only.

- \e Generated \e code is generated by \c usbgen from the user's configuration file.  This provides static structures needed for enumeration, and for a few other purposes.

- The \e core \e code implements common logic and behavior, and is the same for every port.

- A \e port is a set of back-end code which works with some particular piece of hardware.  A port typically occupies a single C file.  A port is used by linking its source files with the core PORUS files.

- The \e hardware \e API defines those functions which a port must implement, and some it can optionally implement.  Users may never call these functions directly.

- The \e private \e API is used only by ports and the core.  User code must never touch any of the functions and definitions in the private API.  The private API is found in \c usbpriv.h and \c usbhw.h .

\section datatypes Data types

PORUS uses a number of custom data types.  Definitions are given in \c types.h file.  A default \c types.h is given in the top level, and machine-specific versions, if needed, are kept in the \c port subdirectory (see below).

- \c u8 Unsigned 8-bit.  Usually \c unsigned \c char .
- \c s8 Signed 8-bit.  Usually \c char .
- \c u16 Unsigned 16-bit.  Usually \c unsigned \c short .
- \c s16 Signed 16-bit.  Usually \c short .
- \c u32 Unsigned 32-bit.  Usually \c unsigned \c long .
- \c s32 Signed 32-bit.  Usually \c signed \c long .
- \c u64 Unsigned 64-bit.  Usually \c unsigned \c long \c long .
- \c s64 Signed 64-bit.  Usually \c signed \c long \c long .
- \c f32 IEEE-754 floating point, 32 bits.  Usually \c float .
- \c f64 IEEE-754 floating point, 64 bits.  Usually \c double .

The latter two are seldom used.

These data types are used when width is important.  For general use, PORUS code uses \c int for integers and \c float for floating-point.  Occasionally it will use \c char .

Boolean values are passed as \c int and use the usual C convention that 0 is false and non-zero is true.

\section sourcefiles Source files

This diagram shows the include relationships between the various source files in PORUS:

\image html includetree.png

The arrows point from a file to a file it includes.

User code must include \c usb.h .  This contains the PORUS public API, and includes \c usbconfig.h , which is generated by \c usbgen .  \c usbconfig.h includes extra headers needed by the generated files.

The core uses \c usbhw.h .  \c usbhw.h is separated from \c usbpriv.h for clarity and to ease porting.  Functions in \c usbhw.h must be implemented by ports, while functions in \c usbpriv.h are part of the PORUS core.  \c usbhw.h requires some definitions in \c usbpriv.h .

\section naming Function and variable names

All PORUS function names begin with either \c usb_ or \c usbhw_ .  \c usb_ 
is used for functions in the public API.  \c usbhw_ is used for functions in the hardware API.  The functions related only to control endpoints are prefixed \c usb_ctl_ .

Names for global variables follow the same conventions as function names.

Accessor functions are identified by prefix.  Setter functions are prefixed \c usb_set_ , \c usb_ctl_set_ , or \c usbhw_set_ .  Boolean getter functions are sometimes named with \c _is_ ; getters which report a parameter use \c _get_ .

\section numbers Endpoint numbers

USB provides for sixteen IN endpoints, numbered 0-15, and sixteen OUT endpoints, also numbered 0-15.  To simplify the API design, PORUS unifies these into a single numbering scheme:

- Endpoints OUT0-15 are numbered 0-15.
- Endpoints IN0-15 are numbered 16-31.

Hence, IN endpoint numbers are the same as OUT endpoint numbers, but with bit 4 set.

Control endpoints are included in this list, but have their own set of functions.  Very few of the common PORUS functions accept control endpoint numbers.

*/


/* Config file for PORUS test */

/*
============================================================
Main options & device configuration

--- Data format

One of u8, u16.  If u8, the data type is unsigned char; if u16, 
the data type is unsigned short.

Some processors can only address data by word.  Setting this 
option to u16 causes descriptors to be generated in packed-byte 
format.  The default is u8, so that descriptors are generated in 
bytes.

This option also determines the type of usb_data_t, and the type of 
all of the internal data arrays.
*/

dataFormat=u16

/* --- Control write buffer length, in bytes

This is the length of the array used to receive data from control write 
requests.  The array is statically allocated.  Default is 32 bytes.
*/

//ctlWriteBufLen=32

/* USB version.  Default is 2.0 */

usbRelease="1.1"

/* --- Device class, subclass, and protocol

Use numeric constants here (e.g. 0xFF).  The defaults are for a vendor-
specific class.
*/

//classCode=0xff
//subClassCode=0xff
//protocolCode=0xff

/* --- Vendor and product ID

16-bit integers.  Vendor ID is not optional; product ID defaults to 0.
*/

vendorID=0xFFFF		// Unused ID
productID=0		// nothing

/* --- Device release number

This must be a base-10 integer.  It can be up to 4 digits long.
*/

devRelease=0

/* --- Manufacturer description

Typically your name or your company's name.  Optional; defaults to nothing.
*/

manufacturerDesc="Michael Ashton"

/* --- Product description

The name of the device.  Optional; defaults to nothing.
*/

productDesc="PORUS Test"

/* --- Serial number

You can supply a string here or set it at run time.  To be able 
to set the string at run time, you must uncomment this option; 
you can leave it blank or put in a default.

If you do not supply this option, the code will not return a 
serial number string, and the functions for changing the serial 
number string will not be generated.
*/

serialNumber="0"

/*============================================================
  Configuration data

We currently support only one configuration.  Its selector value 
will be 1.
*/

config {

/* --- Configuration description

Name of this configuration.  Usually not set.  Defaults to nothing.
*/
	//name="Default config"

/* --- Self powered

Boolean.  Default is true.
*/
	//selfPowered=true

/* --- maxPower

Integer in mA; up to 500.  Default is 0.  If selfPowered is true, 
this option is ignored and set to 0.
*/

	//maxPower=0

/* --- Remote wakeup

Boolean; whether the device can perform a remote wakeup (of the host).  
Default is false.
*/

	//remoteWakeup=false

/*============================================================
  Interface data
*/
	interface {

/* --- Interface class

These are 8-bit integers.  Defaults to the codes for vendor-specific.
*/

		//classCode=0xff
		//subClassCode=0xff
		//protocolCode=0xff

/* --- Interface description

Defaults to none.
*/

		//desc="default interface"

/*============================================================
  Endpoint data

There is no descriptor for the control pipe endpoints (0).  If 
you have other endpoints, sections for them *must* be supplied.  
It is an error to supply descriptors for endpoints numbered 0.
*/
		endpoint {

/* --- Direction

Either in or out.  There is no default.

"in" and "out" are specified relative to the *host*, 
and not the device.  A device's input endpoint sends data 
to the host; a device's output endpoint receives data from the host.
(Sorry, I didn't make the rules -- people that write Windows 
drivers made them, apparently.  Be thankful that I didn't copy the  
Hungarian notation from the spec.)
*/

			dir=in

/* --- Endpoint number

Integer from 1 to 15, subject to hardware constraints.  No default.
Zero is illegal, as it is reserved for the control endpoint.

This number must be unique within a configuration 
for endpoints of the same direction.
*/

			number=1

/* --- Transfer type

One of the following: isochronous, bulk, interrupt.  
There is no default.

For interrupt endpoints, you must set the pollingInterval option.

For isochronous endpoints, you must set the syncType, usageType, and 
pollingInterval options.
*/

			type=bulk

/* --- Synchronization type

Only valid if transferType is isochronous; otherwise ignored.  
Must be one of none, async, adaptive, sync.  See the spec for 
details.  Default is none.
*/

			//syncType=none

/* --- Usage type

Only valid if transferType is isochronous; otherwise ignored.  
Must be one of data, feedback, implicit.  I don't know what they 
mean either.  See the spec.  Default is data.
*/

			//usageType=data

/* --- Maximum packet size

Integer, unit is bytes.  Range is system dependent.  There is no 
default.

Note that for isochronous endpoints, this has the effect of reserving 
bandwidth.  See the spec.
*/

			maxPacketSize=64

/* --- Polling interval

This is the number of frames that occurs between polls for data.  
It has meaning for interrupt and input isochronous endpoints only; 
for other endpoints this is ignored, and can be omitted.

For isochronous endpoints, this number must be a power of 2, and can 
be up to 32768.  For interrupt endpoints, it must be in the range
1-255 inclusive.  There is no default in either case.
*/

			//pollingInterval=1
		}
		endpoint {
			dir=out
			number=1
			type=bulk
			maxPacketSize=64
		}
		/* Other endpoints can follow */
	}
	/* Other interfaces can follow */
}
/* Other configurations can follow */

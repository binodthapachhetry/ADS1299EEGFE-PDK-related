
2006-05-22  Michael Ashton <ashton_michael@ti.com>

	Added suspend & resume endpoint events

2006-05-13  Michael Ashton <ashton_michael@ti.com>

	porus actually kind of works now.  Major API changes.  We use endpoint events now.  Tested with estyx so far.  Will break other stuff.  No change to enumeration mech though, that's pretty much rock solid :)

2006-05-10  Michael Ashton <ashton_michael@ti.com>

	Plenty of changes since the last commit.  This version still has some bugs, checking in now because it more or less builds, I think

2005-11-17  Michael Ashton <ashton_michael@ti.com>

	Loads of changes ..

	- Unified rx & tx code, now have only usb_move()
	- rx code in there now, not tested though
	- Major reform work on doxygen docs
	- New book: PORUS Handbook
	- Test suite specified

2005-02-24  Michael Ashton <ashton_michael@ti.com>

	- We now calc USB PLL freq by calling GBL_getClkIn; no parameters to pass now, but TCF must be correct

2005-02-23  Michael Ashton <ashton_michael@ti.com>

	- *Very* evil bug in usbdescgen that caused usb_mem_len to not work.  Fixed.  Can't believe I missed it before ..
	- We now use 17 and up for endpoint IDs in the config struct, like we're supposed to
	- Bulk TX now uses DMA interrupts instead of EP interrupts.  Seems to work much better.
	- General debug of bulk TX, it seems to work fine now.
	- Got memory allocating in the 55x port.  This was very painful.  Probably a bug in tconf.  malloc() doesn't work.  Will need doc acrobatics here.
	- Probably other stuff .. like doc updates ..

2005-02-16  Michael Ashton <ashton_michael@ti.com>

	Located the stall-on-control-write bug.  usbhw_ctl_get_write_data always cleared OUT NAK after copy, but didn't switch the DIR bit, so if an IN came in too soon the hardware would stall.

	Got rid of the call we added last night, and added a 'last' parameter to usbhw_ctl_get_write_data, so usbhw can switch the dir bit at the right time.  Seems to work now; it's not stalling any more.

2005-02-15  Michael Ashton <ashton_michael@ti.com>

	Fixed bug where control write transactions having a data stage would stall.  Required the addition of a hardware call.  Still a bit of a problem with control write floods, which occasionally lead to a stall.  Will investigate later.

2005-02-14  Michael Ashton <ashton_michael@ti.com>

	Documentation updates.

2005-02-14  Michael Ashton <ashton_michael@ti.com>

	After much pain and suffering (well, not nearly so much as last time), it enumerates.  Almost certainly it can't do bulk yet, but it does enumerate.  Good time for a commit, I think.

2005-02-11  Michael Ashton <ashton_michael@ti.com>

	Well, it compiles again ... but does it work?  We don't know.  It's not been run yet.  Will get enumeration going, and then .. DATA .. which will put us roughly back where we were, which is 10 feet from release.  ARGGHGH

2005-02-10  Michael Ashton <ashton_michael@ti.com>

	- Added port files for c55x & port dir structure
	- Documentation edits
	- Major API change to control system.  The two-stage design is new, and allows us to move the control parsing etc. into a thread.  This is documented.
	- status struct is now global, and no longer passed around as a parameter
	- changed stdctl.c to ctl.c.  Will in future try to move all the non-hardware control system code there.
	- split up the standard control handlers into read and write functions, changed them to fit the new API
	- Added a new config parameter, ctlWriteBufLen, which defines the length
	in bytes of the control recieve array
	- Control receive array is now global and we declare it in usbconfig.c

2005-01-28  Michael Ashton <ashton_michael@ti.com>

	Fixed a bad bug in bulk transmit, couple of other cleanups

2004-11-17  Michael Ashton <ashton_michael@ti.com>

	- Major API change: we now no longer use pointers, but u32s and byte lengths.  This applies only to bulk transfers; control transfers work as before.  This gets around pointer arithmetic problems with the c55x compiler.  Also makes more sense for the DMA which uses byte addresses anyway.
	- Reload DMA appears to not work; it drops blocks.  We don't use it any more.
	- We are presently having the DMA work the full block instead of packet-by-packet, this seems to work although the docs aren't clear about it
	- We now enable other interrupts in the ISR, except for ours.  This may not be permanent.
	- Several other bug fixes

2004-11-02  Michael Ashton <ashton_michael@ti.com>

	- Added control callbacks, also vendor read/write control callbacks
	- Moved a good bit of the control stuff to usbstdctl.c

2004-11-02  Michael Ashton <ashton_michael@ti.com>

	Last commit was too long ago, but here's what I remember

	- Fixed nasty bug in enumeration system having to do with states, esp. the suspended state.

	- USB IN transactions were basically totally broken, now they work OK for polled DMA busy method; callback not implemented yet though

2004-10-10  Michael Ashton <ashton_michael@ti.com>

	- usbdescgen was generating a bad endpoints array.  This showed up for IN endpoints.  Fixed
	- (usbstdctl.c) Some of the standard control message handlers were misinterpreting the index field for IN endpoints.  Fixed
	- IN endpoints had screwed-up register setup routines.  Fixed
	- Check for transaction-in-progress during IN interrupt was broken.  Fixed
	- Now initialising configuration 1 endpoint data structures during usb_init()

2004-10-10  www-data

	Initial import


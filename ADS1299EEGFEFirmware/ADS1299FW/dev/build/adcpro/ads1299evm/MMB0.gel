/*--------------------------------------------------------------*/
/* C5510_DSK.gel                                                */
/* Version 1.00                                                 */
/*                                                              */
/* This GEL file is designed to be used in conjunction with     */
/* CCS 3.X and the MMB0.                                        */
/* Richard Oed, October 2007                                    */
/*--------------------------------------------------------------*/

/*--------------------------------------------------------------*/
/* StartUp()                                                    */
/* This function is called each time CCS is started.            */
/* Customize this function to perform desired initialization.   */
/*--------------------------------------------------------------*/
StartUp()
{
    setup_memory_map();
}

/*--------------------------------------------------------------*/
/* OnTargetConnect()                                            */
/* This function is called by CCS when you do Debug->Connect on */
/* CCS 3.X.                                                     */
/*--------------------------------------------------------------*/
OnTargetConnect()
{
    GEL_Reset();

    init_emif();

    GEL_TextOut("MMB0 StartUp Complete.\n");
}

/*--------------------------------------------------------------*/
/* OnPreFileLoaded()                                            */
/* This function is called automatically when the 'Load Program'*/
/* Menu item is selected.                                       */
/*--------------------------------------------------------------*/
OnPreFileLoaded()
{
    /* Reset the CPU to clean up state */
    GEL_Reset();
}

/*--------------------------------------------------------------*/
/* OnRestart()                                                  */
/* This function is executed before a file is loaded. Disable   */
/* interrupts and DMA from the current program so pending       */
/* events and transfers don't interfere with the new program.   */
/*--------------------------------------------------------------*/
OnRestart()
{
    /* Disable interrupts */
    *(int*)0x0003 = *(int*)0x0003 | 0x0800; // Set INTM
    *(int*)0x0000 = 0;      // Clear IER0
    *(int*)0x0045 = 0;      // Clear IER1

    /* Disable each DMA channel */
    *(int*)0xC01@io = 0;    // DMA0
    *(int*)0xC21@io = 0;    // DMA1
    *(int*)0xC41@io = 0;    // DMA2
    *(int*)0xC61@io = 0;    // DMA3
    *(int*)0xC81@io = 0;    // DMA4
    *(int*)0xCA1@io = 0;    // DMA5
}


/*--------------------------------------------------------------*/
/* OnReset()                                                    */
/* This function is executed each time a reset is called.       */
/* Disbles interrupts and DMA from the current program so       */
/* pending events and transfers don't interfere.                */
/*--------------------------------------------------------------*/
OnReset()
{
    init_emif();

    /* Disable interrupts */
    *(int*)0x0003 = *(int*)0x0003 | 0x0800; // Set INTM
    *(int*)0x0000 = 0;      // Clear IER0
    *(int*)0x0045 = 0;      // Clear IER1

    /* Disable each DMA channel */
    *(int*)0xC01@io = 0;    // DMA0
    *(int*)0xC21@io = 0;    // DMA1
    *(int*)0xC41@io = 0;    // DMA2
    *(int*)0xC61@io = 0;    // DMA3
    *(int*)0xC81@io = 0;    // DMA4
    *(int*)0xCA1@io = 0;    // DMA5

    GEL_TextOut("MMB0 Reset Complete.\n");
}

/*--------------------------------------------------------------*/
/* setup_memory_map()                                           */
/*--------------------------------------------------------------*/
setup_memory_map()
{
    GEL_MapOn();
    GEL_MapReset();

    /* Init debugger memory map for program space */
    GEL_MapAdd( 0x0000C0, 0, 0x00FF40, 1, 1 );  // DARAM
    GEL_MapAdd( 0x010000, 0, 0x010000, 1, 1 );  // SARAM
    GEL_MapAdd( 0x040000, 0, 0x3C0000, 1, 1 );  // External CE0
    GEL_MapAdd( 0x400000, 0, 0x400000, 1, 1 );  // External CE1
    GEL_MapAdd( 0x800000, 0, 0x400000, 1, 1 );  // External CE2
    GEL_MapAdd( 0xC00000, 0, 0x3F0000, 1, 1 );  // External CE3
    GEL_MapAdd( 0xFF0000, 0, 0x010000, 1, 1 );  // ROM

    /* Init debugger memory map for data space */
    GEL_MapAdd( 0x000000, 1, 0x000060, 1, 1 );  // MMRs
    GEL_MapAdd( 0x000060, 1, 0x007FA0, 1, 1 );  // DARAM
    GEL_MapAdd( 0x008000, 1, 0x020000, 1, 1 );  // SARAM
    GEL_MapAdd( 0x028000, 1, 0x1E0000, 1, 1 );  // External CE0
    GEL_MapAdd( 0x200000, 1, 0x200000, 1, 1 );  // External CE1
    GEL_MapAdd( 0x400000, 1, 0x200000, 1, 1 );  // External CE2
    GEL_MapAdd( 0x600000, 1, 0x1F8000, 1, 1 );  // External CE3

    /* Init debugger memory map for I/O mapped regs */
    GEL_MapAdd( 0x0000u, 2, 0x000Fu, 1, 1 );    // Peripheral Bus
    GEL_MapAdd( 0x07fdu, 2, 0x0001u, 1, 1 );    // SYSR
    GEL_MapAdd( 0x0800u, 2, 0x0016u, 1, 1 );    // EMIF
    GEL_MapAdd( 0x0C00u, 2, 0x00ABu, 1, 1 );    // DMA
    GEL_MapAdd( 0x0E00u, 2, 0x0001u, 1, 1 );    // DMA Global
    GEL_MapAdd( 0x1000u, 2, 0x0004u, 1, 1 );    // TIMER #0
    GEL_MapAdd( 0x1400u, 2, 0x0009u, 1, 1 );    // ICACHE
    GEL_MapAdd( 0x1C00u, 2, 0x0001u, 1, 1 );    // CLKGEN
    GEL_MapAdd( 0x2000u, 2, 0x0055u, 1, 1 );    // TRACE FIFO
    GEL_MapAdd( 0x2400u, 2, 0x0004u, 1, 1 );    // TIMER #1
    GEL_MapAdd( 0x2800u, 2, 0x001Fu, 1, 1 );    // SERIAL PORT #0
    GEL_MapAdd( 0x2C00u, 2, 0x001Fu, 1, 1 );    // SERIAL PORT #1
    GEL_MapAdd( 0x3000u, 2, 0x001Fu, 1, 1 );    // SERIAL PORT #2
    GEL_MapAdd( 0x3400u, 2, 0x0002u, 1, 1 );    // GPIO
    GEL_MapAdd( 0x3800u, 2, 0x0005u, 1, 1 );    // ID
    GEL_MapAdd( 0x6C00u, 2, 0x0002u, 1, 1 );    // EBSR
}

/*--------------------------------------------------------------*/
/* clear_memory_map()                                           */
/* Memory map disable                                           */
/*--------------------------------------------------------------*/
clear_memory_map()
{
    GEL_MapOff();
}

/*--------------------------------------------------------------*/
/* init_emif()                                                  */
/* Emif initialization                                          */
/*--------------------------------------------------------------*/
init_emif()
{
    *(short *)0x6c00@io=1;       /* EBSR        */
    *(short *)0x800@io=0x220;    /* EMIF_EGCR   */
    *(short *)0x803@io=0x3FFF;   /* EMIF_CE01   */
    *(short *)0x804@io=0x5FFF;   /* EMIF_CE02   */
    *(short *)0x805@io=0;        /* EMIF_CE03   */
    *(short *)0x806@io=0x3FFF;   /* EMIF_CE11   */
    *(short *)0x807@io=0x5FFF;   /* EMIF_CE12   */
    *(short *)0x808@io=0;        /* EMIF_CE13   */
    *(short *)0x809@io=0x3FFF;   /* EMIF_CE21   */
    *(short *)0x80a@io=0x5FFF;   /* EMIF_CE22   */
    *(short *)0x80b@io=0;        /* EMIF_CE23   */
    *(short *)0x80c@io=0x3FFF;   /* EMIF_CE31   */
    *(short *)0x80d@io=0x5FFF;   /* EMIF_CE32   */
    *(short *)0x80e@io=0;        /* EMIF_CE33   */
    *(short *)0x80f@io=0x3522;   /* EMIF_SDC1   */
    *(short *)0x813@io=0x0242;   /* EMIF_SDC2   */
    *(short *)0x814@io=0x0003;   /* EMIF_SDC3   */
    *(short *)0x810@io=0x0100;   /* EMIF_SDPE   */
    *(short *)0x801@io=0x22;	 /* EMIF_EMIR0  */
    *(short *)0x812@io=0x3FFF;   /* EMIF_INIT   */

    GEL_TextOut("MMB0 EMIF Init Complete.\n");
}

/*--------------------------------------------------------------*/
/* MMB0 MENU                                                    */
/*--------------------------------------------------------------*/
menuitem "MMB0 Functions";

hotmenu Reset()
{
    GEL_Reset( );
}

hotmenu InitEmif()
{
    init_emif();
}

/*--------------------------------------------------------------*/
/* MEMORY MAP MENU                                              */
/*--------------------------------------------------------------*/
menuitem "Memory Map";

hotmenu SetMemoryMap()
{
    setup_memory_map();
}

hotmenu ClearMemoryMap()
{
    clear_memory_map();
}

/*--------------------------------------------------------------*/
/* EVM MENU                                                     */
/*--------------------------------------------------------------*/
menuitem "ADC EVM";
hotmenu LoadProgDebug()
{
    GEL_Reset();
    GEL_Load("c:\\work\\ads1298evm\\Debug\\ads1298evm-mmb0.out");
}

menuitem "ADC EVM";
hotmenu LoadProgRelease()
{
    GEL_Reset();
    GEL_Load("c:\\work\\ads1298evm\\Release\\ads1298evm-mmb0.out");
}

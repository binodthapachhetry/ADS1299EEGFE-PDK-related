/*{{TIDC_Wizard Auto Code Start                                 */
/****************************************************************/
/* don't change anything here until you know what you are doing!*/
/* the plug-in will change all text between the code marks      */
/* without user interaction!                                    */
/*                                                              */
/****************************************************************/

/****************************************************************/
/* software generated by Data Converter Plug-in (DCP)           */
/* based on <C:\CCSTUD~1.1\PLUGINS\AAP_DEV\c5500\didc_55.h> */
/****************************************************************/
/****************************************************************/
/* Texas Instruments Data Converter API 3.0 for the             */
/* TMS320C5500 DSP platform                                     */
/* Copyright © 2000 - 2006 Texas Instruments Incorporated       */
/* All Rights Reserved                                          */
/*--------------------------------------------------------------*/
/* $Revision: 17 $                        $JustDate: 10/12/06 $ */
/* $Author: A0797073 $                                          */
/****************************************************************/
#ifndef TIDC_API_H
#define TIDC_API_H

#include "dc_conf.h"         /* this has the CHIP_XXXX define   */

#include <csl.h>			 /* TI chip support library         */
#include <csl_mcbsp.h>       /* McBSP support                   */

/****************************************************************/
/* return types and return codes                                */
/****************************************************************/
#define TTIDCSTATUS         int
#define TIDC_NO_RETVAL      (1)
#define TIDC_NO_ERR         (0)
#define TIDC_ERR_NODEVICE   (-1)
#define TIDC_ERR_MCBSP      (-2)
#define TIDC_ERR_FXNNULL    (-3)
#define TIDC_ERR_NOCHIPRES  (-4)
#define TIDC_ERR_XFERPROG   (-5)
#define TIDC_ERR_BADARGS    (-6)
#define TIDC_ERR_DMA        (-7)
#define TIDC_ERR_TIMER      (-8)
#define TIDC_ERR_REGS       (-9)

/****************************************************************/
/* common function pointer table for API 2.1                    */
/****************************************************************/
typedef struct
{
    TTIDCSTATUS (*configure) (void *pDc);
    void (*power) (void *pDc, int bDown);
    long (*read) (void *pDc);
    void (*write) (void *pDc, long lData);
    void (*rblock) (void *pDC, void *pData,
            unsigned long ulCount, void (*callback) (void *));
    void (*wblock) (void *pDC, void *pData,
            unsigned long ulCount, void (*callback) (void *));
    void *reserved[4];
} TTIDC;

/****************************************************************/
/* common function pointer table for API 3.0                    */
/****************************************************************/
typedef struct
{
    TTIDCSTATUS (*configure) (void *pDc);
    TTIDCSTATUS (*control) (void *pDc, int iCmd, void *pValue);
    TTIDCSTATUS (*readsample) (void *pDc, long *lData);
    TTIDCSTATUS (*writesample) (void *pDc, long lData);
    TTIDCSTATUS (*readblock) (void *pDC, void *pData,
            unsigned long ulCount, void (*callback) (void *));
    TTIDCSTATUS (*writeblock) (void *pDC, void *pData,
            unsigned long ulCount, void (*callback) (void *));
    TTIDCSTATUS (*close) (void *pDc);
    void *reserved[2];
    int   rev;
} TTIDC3;


#ifdef __cplusplus
#define DCPAPI extern "C"
#else
#define DCPAPI extern
#endif

/****************************************************************/
/* API functions for API 2.1                                    */
/****************************************************************/
DCPAPI TTIDCSTATUS dc_configure(void *pDC);
DCPAPI void dc_power(void *pDC, int bDown);
DCPAPI long dc_read(void *pDC);
DCPAPI void dc_write(void *pDC, long lData);
DCPAPI void dc_rblock(void *pDC, void *pData,
                      unsigned long ulCount,
               void (*callback) (void *));
DCPAPI void dc_wblock(void *pDC, void *pData,
                      unsigned long ulCount,
                      void (*callback) (void *));

/****************************************************************/
/* API functions for API 3.0                                    */
/****************************************************************/
DCPAPI TTIDCSTATUS dc_control(void *pDC, int iCmd, void *pValue);
DCPAPI TTIDCSTATUS dc_readsample(void *pDC, long *lData);
DCPAPI TTIDCSTATUS dc_writesample(void *pDC, long lData);
DCPAPI TTIDCSTATUS dc_readblock(void *pDC, void *pData,
                               unsigned long ulCount,
                               void (*callback) (void *));
DCPAPI TTIDCSTATUS dc_writeblock(void *pDC, void *pData,
                               unsigned long ulCount,
                               void (*callback) (void *));
DCPAPI TTIDCSTATUS dc_close(void *pDC);

/****************************************************************/
/* common serial port structure                                 */
/****************************************************************/
typedef struct
{
    MCBSP_Handle   hMcbsp;   /* serial port handle              */
    unsigned int   port;     /* number of serial port used      */
    unsigned short intnum;   /* interrupt number to be used     */
    MCBSP_Config   sConfig;  /* serial port config struct (CSL) */
} DCP_SERIAL;

#endif	/* TIDC_API_H  */

/****************************************************************/
/* END OF tidc_api.h                                             */
/****************************************************************/
/*TIDC_Wizard Auto Code End}}*/
